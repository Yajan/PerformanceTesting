<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="URLupload" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(count,1)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(users,1)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(rampup,1)}</stringProp>
        <longProp name="ThreadGroup.start_time">1514352769000</longProp>
        <longProp name="ThreadGroup.end_time">2555731969000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(duration,1200)}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">/usr/local/share/chromedriver</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
          <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;
import org.openqa.selenium;&#xd;
import java.time.temporal.ChronoUnit;&#xd;
import java.time.format.DateTimeFormatter;  &#xd;
import java.time.LocalDateTime;   &#xd;
import org.openqa.selenium.WebElement;&#xd;
import org.openqa.selenium.By;&#xd;
import java.io.IOException;&#xd;
import org.openqa.selenium.Dimension;&#xd;
import org.apache.commons.io.FileUtils;&#xd;
import org.openqa.selenium.OutputType;&#xd;
import org.openqa.selenium.TakesScreenshot;&#xd;
import org.openqa.selenium.WebDriver;&#xd;
import java.net.InetAddress;&#xd;
import java.net.UnknownHostException;&#xd;
import java.util.concurrent.TimeUnit;&#xd;
import org.openqa.selenium.support.ui.WebDriverWait;&#xd;
import org.openqa.selenium.support.ui.ExpectedConditions;&#xd;
&#xd;
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;
WebDriverWait wait= new WebDriverWait(WDS.browser,300);&#xd;
vars.put(&quot;Itr&quot;,String.valueOf(&quot;${__BeanShell(vars.getIteration(),)}&quot;));&#xd;
vars.put(&quot;usr&quot;,String.valueOf(&quot;${__threadNum}&quot;));&#xd;
vars.put(&quot;overlay&quot;,&quot;0&quot;);&#xd;
vars.put(&quot;login&quot;,&quot;0&quot;);&#xd;
vars.put(&quot;Fileupload&quot;,&quot;0&quot;);&#xd;
vars.put(&quot;Urlupload&quot;,&quot;0&quot;);&#xd;
vars.put(&quot;logout&quot;,&quot;0&quot;);&#xd;
vars.put(&quot;ip&quot;,&quot;0&quot;);&#xd;
WDS.sampleResult.sampleStart();&#xd;
//Script Starts from here&#xd;
vars.put(&quot;StartTime&quot;,String.valueOf(LocalDateTime.now()));&#xd;
&#xd;
d = new Dimension(1750, 1000);&#xd;
WDS.browser.manage().window().setSize(d);&#xd;
//Launcing application&#xd;
WDS.browser.get(&quot;${__P(Url,http://app.mammoth.io)}&quot;);&#xd;
&#xd;
//application login process&#xd;
try{&#xd;
wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;${__P(username)}&quot;});&#xd;
wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;${__P(password)}&quot;});&#xd;
login=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(signbuttonid)}&quot;)));&#xd;
startlogin=LocalDateTime.now();&#xd;
login.click();&#xd;
&#xd;
//Overlay starts now&#xd;
TEN_SECONDS=60*1000;&#xd;
WDS.browser.manage().timeouts().implicitlyWait(6, TimeUnit.SECONDS); &#xd;
oldTime=LocalDateTime.now();&#xd;
start=LocalDateTime.now();&#xd;
try{&#xd;
	while(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;
    	WDS.log.info(&quot;overlay is there&quot;);	&#xd;
    	Long minutesBetween=ChronoUnit.MILLIS.between(oldTime,LocalDateTime.now());&#xd;
    	if(minutesBetween&gt;TEN_SECONDS){&#xd;
        	WDS.browser.navigate().refresh();&#xd;
        	oldTimeAfterRefresh=LocalDateTime.now();&#xd;
        //again find overlay after refreshing&#xd;
        	try{&#xd;
        		while(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;
        		Long minutesBetween=ChronoUnit.MILLIS.between(oldTimeAfterRefresh,LocalDateTime.now());&#xd;
        		if(minutesBetween&gt;TEN_SECONDS){&#xd;
        		break outerloop;&#xd;
        	}&#xd;
                else {&#xd;
                    WDS.log.info(&quot;Overlay is there&quot;);&#xd;
                     }&#xd;
                  }&#xd;
               }&#xd;
            catch(Exception e){&#xd;
                //when there is no overlay in test&#xd;
            	WDS.log.info(&quot;Exception :Overlay is not present After refreshing&quot;);	&#xd;
            	end=LocalDateTime.now();&#xd;
            	Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;
            	vars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;
            	Long minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;
            	vars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;
            WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;
        	WDS.log.info(vars.get(&quot;login&quot;));&#xd;
        //Overlay is not present on screen but test should mark as fail,as it required browser refresh to work.&#xd;
                            }&#xd;
                   }&#xd;
               }&#xd;
    //Overlay got invisible now&#xd;
    WDS.log.info(&quot;Overlay is invisible now&quot;);&#xd;
	end=LocalDateTime.now();&#xd;
	Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;
	vars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;
	Long minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;
	vars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;
	WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;
    WDS.log.info(vars.get(&quot;login&quot;));&#xd;
}&#xd;
catch(Exception e){&#xd;
    //There is no overlay found&#xd;
	WDS.log.info(&quot;Exception :Overlay element id is not present.&quot;);&#xd;
	end=LocalDateTime.now();&#xd;
	Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;
	vars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;
	Long minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;
	vars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;
	break outerloop;&#xd;
	}&#xd;
finally{&#xd;
WDS.sampleResult.sampleEnd();&#xd;
}&#xd;
&#xd;
}catch(Exception e)&#xd;
{&#xd;
    //log.info(&quot;Exception is : &quot; +e);&#xd;
    try {&#xd;
           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;
           ip= String.valueOf(ipAddr.getHostAddress());&#xd;
            } catch (UnknownHostException ex) {&#xd;
                ex.printStackTrace();&#xd;
            }&#xd;
    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;
    try {&#xd;
     // now copy the  screenshot to desired location using copyFile //method&#xd;
        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;URLupload_login&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;
    }&#xd;
    catch (IOException e)&#xd;
     {&#xd;
       WDS.log.info(&quot;something wrong&quot;);&#xd;
     }&#xd;
 }&#xd;
&#xd;
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">beanshell</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
          <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;
import org.openqa.selenium;&#xd;
import java.time.temporal.ChronoUnit;&#xd;
import java.time.format.DateTimeFormatter;  &#xd;
import java.time.LocalDateTime;   &#xd;
import org.openqa.selenium.WebElement;&#xd;
import org.openqa.selenium.By;&#xd;
import java.io.FileReader;&#xd;
import java.io.BufferedReader;&#xd;
import org.apache.commons.io.FileUtils;&#xd;
import org.openqa.selenium.OutputType;&#xd;
import org.openqa.selenium.TakesScreenshot;&#xd;
import java.io.FileWriter;&#xd;
import java.util.concurrent.TimeUnit;&#xd;
import java.util.ArrayList;&#xd;
import org.testng.asserts.SoftAssert;&#xd;
import java.util.List;&#xd;
import org.openqa.selenium.support.ui.WebDriverWait;&#xd;
import org.openqa.selenium.support.ui.ExpectedConditions;&#xd;
&#xd;
WebDriverWait wait= new WebDriverWait(WDS.browser,180);&#xd;
WDS.sampleResult.sampleStart();&#xd;
try{&#xd;
try{&#xd;
   //Checking for the invisibility of blanck page if there are no data in the application&#xd;
wait.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)));&#xd;
}catch(Exception e){&#xd;
    //If There is no data in the application uploading a new file.&#xd;
if(WDS.browser.findElement(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)).isDisplayed()){&#xd;
wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewButtonId)}&quot;))).click();&#xd;
start=LocalDateTime.now();&#xd;
Thread.sleep(5000);&#xd;
file1= WDS.browser.findElement(By.xpath(&quot;${__P(fileUploadButtonId)}&quot;));&#xd;
&#xd;
WDS.browser.executeScript(&quot;document.querySelector(&apos;.fileSelectHiddenInput&apos;).setAttribute(&apos;style&apos;,display=&apos;block&apos;,&apos;opacity:1; width:10px; height:10px; z-index:100&apos;)&quot;,new Object[] {&quot;&quot;});&#xd;
//filelocation=&quot;C:/Users/Deepak/Desktop/MamothPerformanceTest/scale_up_tests-master/test_suites/Test Files/CSVoffice_main.csv&quot;;&#xd;
filelocation=java.lang.System.getProperty(&quot;user.dir&quot;) + &quot;/&quot; + &quot;Testfiles/CSVoffice_main.csv&quot;;&#xd;
WDS.log.info(filelocation);&#xd;
file1.sendKeys(new String[] {filelocation});&#xd;
}&#xd;
}&#xd;
}catch(Exception e)  &#xd;
{  &#xd;
    //Exception if there is problem in file upload.&#xd;
      try {&#xd;
           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;
           ip= String.valueOf(ipAddr.getHostAddress());&#xd;
            } catch (UnknownHostException ex) {&#xd;
                ex.printStackTrace();&#xd;
            }&#xd;
    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;
    try {&#xd;
     // now copy the  screenshot to desired location using copyFile //method&#xd;
        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;URLupload_lgnupload&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;
    }&#xd;
    catch (IOException e)&#xd;
     {&#xd;
       WDS.log.info(&quot;something wrong&quot;);&#xd;
     }&#xd;
}&#xd;
&#xd;
WDS.sampleResult.sampleEnd();</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">beanshell</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
          <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;
import org.openqa.selenium;
import org.openqa.selenium.firefox.FirefoxProfile;
import java.time.temporal.ChronoUnit;
import java.time.format.DateTimeFormatter;  
import java.time.LocalDateTime;   
import org.openqa.selenium.WebElement;
import org.openqa.selenium.By;
import java.io.FileReader;
import org.apache.commons.io.FileUtils;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import java.io.BufferedReader;
import java.io.FileWriter;
import java.util.concurrent.TimeUnit;
import java.util.ArrayList;
import java.util.List;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
WebDriverWait wait= new WebDriverWait(WDS.browser,300);

WDS.sampleResult.sampleStart();
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();
//uploading a .csv file to application here after clicking upload button
try{
    wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(addNewButtonId)}&quot;)));
    wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(addNewButtonId)}&quot;))).click();
}catch(Exception e)
{
    try {
           InetAddress ipAddr = InetAddress.getLocalHost();
           ip= String.valueOf(ipAddr.getHostAddress());
            } catch (UnknownHostException ex) {
                ex.printStackTrace();
            }
    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);
    try {
     // now copy the  screenshot to desired location using copyFile //method
        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;URLupload_clickup&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));
    }
    catch (IOException e)
     {
       WDS.log.info(&quot;something wrong&quot;);
     }    
 }
Thread.sleep(2000);
//choosing URL option to upload
try{
    wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(addByURL)}&quot;)));
    wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addByURL)}&quot;))).click();
    wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(inputBoxForURLUpload)}&quot;))).sendKeys(new String[] {&quot;http://samplecsvs.s3.amazonaws.com/Sacramentorealestatetransactions.csv&quot;});
    element=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(doneButtonOnURLUpload)}&quot;)));
    element.click();
}
catch(Exception e)
{
    try {
           InetAddress ipAddr = InetAddress.getLocalHost();
           ip= String.valueOf(ipAddr.getHostAddress());
            } catch (UnknownHostException ex) {
                ex.printStackTrace();
            }
    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);
    try {
     // now copy the  screenshot to desired location using copyFile //method
        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;URLupload_upload&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));
    }
    catch (IOException e)
     {
       WDS.log.info(&quot;something wrong&quot;);
     } 
    }
WDS.sampleResult.sampleEnd();

</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">beanshell</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
          <stringProp name="WebDriverSampler.script">import java.util.concurrent.TimeUnit;
import java.time.LocalDateTime;   
import org.openqa.selenium.By;
import java.time.temporal.ChronoUnit;
import org.apache.commons.io.FileUtils;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;

WebDriverWait wait = new WebDriverWait(WDS.browser,300);
WebDriverWait wait2 = new WebDriverWait(WDS.browser,300);
long oldTimeForProgress=System.currentTimeMillis();

WDS.sampleResult.sampleStart();
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();
boolean progressbarVisibility;
start=LocalDateTime.now();
		WDS.browser.manage().timeouts().implicitlyWait(3, TimeUnit.SECONDS);  
		try  
		{  //Checking for progress bar
			WDS.browser.findElement(By.xpath(&quot;//div[@class=&apos;progress progress-mini&apos;]&quot;));
			progressbarVisibility= true;  
		}  
		catch(Exception e)  
		{  
			progressbarVisibility= false;  
		}  
		finally  
		{  
			WDS.browser.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);  
		}
		//if the progress bar present flow goes to if condition
		if(progressbarVisibility==true){
			try{
				WDS.browser.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);  

			}
			catch(Exception e){
				log.info(&quot;--------------------------------Progress bar gets invisible now-------------------&quot;);
				end=LocalDateTime.now();
            		Long minutesBetween=ChronoUnit.MILLIS.between(start,end);
            		vars.put(&quot;Urlupload&quot;,String.valueOf(minutesBetween));
			//Getting the timestamp of the URL upload
			}
			try{
				long oldTimeForProcessing=System.currentTimeMillis();
				WDS.browser.manage().timeouts().implicitlyWait(3, TimeUnit.SECONDS);  
				while(WDS.browser.findElement(By.xpath(&quot;//div[@class=&apos;ds-title processing&apos;]//div[@class=&apos;status-wrapper&apos;]/div[contains(@class,&apos;status&apos;)]/p&quot;)).isDisplayed()){
					WDS.log.info(&quot;Upload processing messages is there&quot;);
					if(System.currentTimeMillis()- oldTimeForProcessing&gt;360*1000){
						WDS.log.info(&quot;---------------Looking like file got stuck in processing messages----------------&quot;);
					}
				}
			}
			catch(Exception e){
				WDS.log.info(&quot;--------------------------------Upload Processing messages gets invisible now-------------------&quot;);
				end=LocalDateTime.now();
            		Long minutesBetween=ChronoUnit.MILLIS.between(start,end);
            		vars.put(&quot;Urlupload&quot;,String.valueOf(minutesBetween));
			//Getting the timestamp of the URL upload

			}
			finally  
			{  
				WDS.browser.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);  
			}  


		}
		else{
    try{
				long oldTimeForProcessing=System.currentTimeMillis();
				WDS.browser.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);  
				while(WDS.browser.findElement(By.xpath(&quot;//div[1][contains(@class,&apos;ds-single processing&apos;)]&quot;)).isDisplayed()){
					WDS.log.info(&quot;Upload processing messages is there&quot;);
					if(System.currentTimeMillis()- oldTimeForProcessing&gt;360*1000){
						WDS.log.info(&quot;---------------Looking like file got stuck in processing messages----------------&quot;);

					}
				}
			}
			catch(Exception e){
				WDS.log.info(&quot;--------------------------------Processing messages gets invisible now-------------------&quot;);
	end=LocalDateTime.now();
        Long minutesBetween=ChronoUnit.MILLIS.between(start,end);
        vars.put(&quot;Urlupload&quot;,String.valueOf(minutesBetween));
	//Getting the timestamp of the URL upload
			}
			finally  
			{  
				WDS.browser.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);  
			}
}
try{
    //User is trying to logout from the application
    wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(cornerSettingMenu)}&quot;))).click();
    logout=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(logoutButtonId)}&quot;)));
    start=LocalDateTime.now();
    logout.click();
    wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div/figure[@class=&apos;logo-mammoth text-hide&apos;]&quot;)));
    end=LocalDateTime.now();
    Long minutesBetween=ChronoUnit.MILLIS.between(start,end);
    vars.put(&quot;logout&quot;,String.valueOf(minutesBetween));
    WDS.log.info(vars.get(&quot;logout&quot;));
 }
  catch(Exception e)
 {
        //log.info(&quot;Exception is : &quot; +e);
        try {
               InetAddress ipAddr = InetAddress.getLocalHost();
               ip= String.valueOf(ipAddr.getHostAddress());
                } catch (UnknownHostException ex) {
                    ex.printStackTrace();
                }
        File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);
        try {
         // now copy the  screenshot to desired location using copyFile //method
            FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;URLupload_upload&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));
        }
        catch (IOException e)
         {
           WDS.log.info(&quot;something wrong&quot;);
         }
}
 finally{

        try {
           InetAddress ipAddr = InetAddress.getLocalHost();
          vars.put(&quot;ip&quot;,String.valueOf(ipAddr.getHostAddress()));

            } catch (UnknownHostException ex) {
                ex.printStackTrace();
            }
    EndTime=LocalDateTime.now();
    f = new FileOutputStream(&quot;TimestampsFolder/Timestamp_URLupload_&quot;+vars.get(&quot;ip&quot;)+&quot;.txt&quot;,true); 
    p = new PrintStream(f);
    WDS.log.info(&quot; EndTime = &quot;+EndTime);
    WDS.sampleResult.sampleEnd();
    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));
    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));
    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));
    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));
    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Urlupload = &quot;+vars.get(&quot;Urlupload&quot;));
    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Urlupload = &quot;+vars.get(&quot;Urlupload&quot;));
    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));
    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));
    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: startTime = &quot;+vars.get(&quot;StartTime&quot;));
    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: startTime = &quot;+vars.get(&quot;StartTime&quot;));
    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: EndTime = &quot;+EndTime);
    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: EndTime = &quot;+EndTime);
    LocalDateTime StartTime = LocalDateTime.parse(vars.get(&quot;StartTime&quot;));
    Long minutesBetween=ChronoUnit.MILLIS.between(StartTime,EndTime);
    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);
    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);

    p.close();
 }</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">beanshell</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
      </hashTree>
      <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Property File Reader" enabled="true">
        <stringProp name="propFilePath">/home/ubuntu/apache-jmeter-3.3/bin/Inputdatas.properties</stringProp>
      </com.tag.jmeter.ext.config.PropertyReader>
      <hashTree/>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
